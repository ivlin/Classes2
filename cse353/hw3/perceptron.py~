import numpy as np

def csv_as_matrix(filename):
    datafile = open(filename,'r')
    data=[]
    for row in datafile.read().split('\n'):
        try:
            data.append([float(col) for col in row.split(',')])
        except ValueError:
            print "line skipped"
    datafile.close()
    return data

def dot_product(a,b):
    if len(a)==len(b):
        sum=0.0
        for i in xrange(len(a)):
            sum=sum+a[i]*b[i]
        return sum
    return None

def init_weights(size):
    return [0 for i in xrange(size)]

def perceptron_learning(dataset, update_modifier):
    weights=init_weights(len(dataset[0])-1)
    iteration=0
    while True:
        print "iteration " +str(iteration)+" "+str(update_modifier)
        positive=True
        error=init_weights(len(weights))
        sum_err=0
        for data_point in dataset:
            inner_prod = dot_product(weights, data_point[1:])
            if data_point[0]*inner_prod <= 0:
                positive = False
                error = [error[i] + data_point[0]*data_point[1+i] for i in xrange(len(error))]
                sum_err=sum_err+1 
        weights=[weights[i] + update_modifier*error[i]/len(error) for i in xrange(len(error))]
        if positive:
            return weights
        print sum_err
        iteration=iteration+1

def linear_classifier(dataset):
    return None

#Index 0: Team won the game (1 or -1)
#Index 1: Cluster ID (related to location)
#Index 2: Game mode
#Index 3: Game type (e.g. "ranked")
#Index 4-End: Heroes (5 1 and 5 -1)
data = csv_as_matrix("dota2Test.csv")

def combinations(dataset):
    transformed_data = []
    for datum in dataset:
        td=datum[:4]
        #print td
        a=4
        while a < len(datum):
            b=4
            while b < len(datum):
                if a!=b:
                    if datum[a]+datum[b]>=2:
                        td.append(1)
                    else:
                        td.append(0)
                b=b+1
            a=a+1
    transformed_data.append(td)
    return transformed_data
    
print "transformed"
#data=combinations(data)
    
#normalize to under 1.0

for ind in xrange(len(data[0])-1):
    max=0
    for datum in data:
        if datum[1+ind]>max:
            max=datum[1+ind]
    for datum in data:
        if max is not 0:
            datum[1+ind]=datum[1+ind]/max

weights=perceptron_learning(data,0.01)

#checking
for i in data:
    print i[0]*dot_product(weights,i[1:])
